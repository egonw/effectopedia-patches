package org.qsari.effectopedia.defaults;



public class DefaultSourceCode
	{
		public static String	DEFAULT_JAVA_EXECUTABLE_MODEL;
		static
			{
				StringBuilder sb = new StringBuilder();
    sb.append("import java.io.PrintStream;\n");
    sb.append("import java.util.ArrayList;\n");
    sb.append("\n");
    sb.append("import org.qsari.effectopedia.base.EffectopediaObject;\n");
    sb.append("import org.qsari.effectopedia.core.modelling.ExecutableModel;\n");
    sb.append("import org.qsari.effectopedia.core.modelling.ExecutionProgressListener;\n");
    sb.append("\n");
    sb.append("import org.qsari.effectopedia.data.objects.Descriptor;\n");
    sb.append("import org.qsari.effectopedia.data.objects.DescriptorType;\n");
    sb.append("import org.qsari.effectopedia.data.objects.ObjectProperties;\n");
    sb.append("import org.qsari.effectopedia.data.objects.ObjectProperty;\n");
    sb.append("import org.qsari.effectopedia.data.objects.ObjectProperty.ValueAndUnit;\n");
    sb.append("import org.qsari.effectopedia.data.objects.ObjectPropertyMultivalued;\n");
    sb.append("import org.qsari.effectopedia.data.objects.ObjectPropertyMultivalued_Documented;\n");
    sb.append("import org.qsari.effectopedia.data.objects.ObjectPropertyMultivalued_Documented.Documented_Value;\n");
    sb.append("import org.qsari.effectopedia.data.objects.ObjectPropertyType;\n");
    sb.append("\n");
    sb.append("/**\n");
    sb.append(" * <code>JavaExecutableModel</code> is free source code part of Effectopedia\n");
    sb.append(" * software: you can redistribute it and/or modify it under the terms of the GNU\n");
    sb.append(" * General Public License as published by the Free Software Foundation, either\n");
    sb.append(" * version 3 of the License, or (at your option) any later version.\n");
    sb.append(" *\n");
    sb.append(" * This program is distributed in the hope that it will be useful, but WITHOUT\n");
    sb.append(" * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n");
    sb.append(" * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\n");
    sb.append(" * details.\n");
    sb.append(" *\n");
    sb.append(" * <p>\n");
    sb.append(" * <code>JavaExecutableModel</code> is a minimalistic implementation of the\n");
    sb.append(" * <code>ExecutableModel<code> interface which allows Effectopedia to execute models written\n");
    sb.append(" * in Java. Effectopedia needs Java SE Development Kit 7 (JDK) or later\n");
    sb.append(" * installed on the local machine in order to compile and execute this source\n");
    sb.append(" * code. You can istall JDK form <a\n");
    sb.append(" * href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\"\n");
    sb.append(" * >here</a> For successful compilation you will also need\n");
    sb.append(" * <code>effectopedia.jar</code> which is either the file you are currently\n");
    sb.append(" * running or is supplied in the same directory as with your effectopedia.exe.\n");
    sb.append(" * In both cases Effectopedia should detect the location and pass it as a\n");
    sb.append(" * -classpath option to the java compiler.\n");
    sb.append(" * </p>\n");
    sb.append(" *\n");
    sb.append(" * @author <a href=\"mailto:hristo.aladjov@effectopedia.org\">Hristo Aladjov</a>\n");
    sb.append(" * @version 1.0\n");
    sb.append(" */\n");
    sb.append("public class JavaExecutableModel implements ExecutableModel\n");
    sb.append("  {\n");
    sb.append("    \n");
    sb.append("    /**\n");
    sb.append("     * The <code>execute</code> method performs the execution of this model. It\n");
    sb.append("     * uses the supplied model parameters to calculate the model output based on\n");
    sb.append("     * the model input. All method parameters and return result are represented\n");
    sb.append("     * using the same self describing data structure <code>ObjectProperties</code>\n");
    sb.append("     * . Please refer to <code>printObjectPropertys</code> to get better\n");
    sb.append("     * understanding on how to use this structure.\n");
    sb.append("     *\n");
    sb.append("     * @param input\n");
    sb.append("     *         The input data of the model represented as a list of object\n");
    sb.append("     *         proeprties.\n");
    sb.append("     * @param modelParameters\n");
    sb.append("     *         The list of parameters of the model to be executed. This list is\n");
    sb.append("     *         usually defined in the global in-silco model (\n");
    sb.append("     *         <code>Method_InSilicoGlobalModel</code> class). The local values of\n");
    sb.append("     *         the parameters can be modified in the Effectopedia interface (using\n");
    sb.append("     *         sliders and drop down lists) and stored for each individual\n");
    sb.append("     *         tested/predicted substance or\n");
    sb.append("     * @param output\n");
    sb.append("     *         The output data of the model represented as a list of object\n");
    sb.append("     *         proeprties. In this particular implementation the output is a clone of\n");
    sb.append("     *         the input (i.e. no data transformation is made)\n");
    sb.append("     * @return execute <code>true</code> if the execution of the model was successful\n");
    sb.append("     *         and <code>false</code> otherwise.\n"); 
    sb.append("     * @see ObjectProperties\n");
    sb.append("     * @see printObjectProperties\n");
    sb.append("     * @since 1.0\n");
    sb.append("     */\n");
    sb.append("    @Override\n");
    sb.append("    public boolean execute(ObjectProperties input, ObjectProperties modelParameters, ObjectProperties output)\n");
    sb.append("      {\n");
    sb.append("        fireExecutionProgressMade(0);\n");
    sb.append("        console.println(\"Executing Model for:\");\n");
    sb.append("        printObjectPropertys(input, \"I. Input\");\n");
    sb.append("        printObjectPropertys(modelParameters, \"II. Model Parameters\");\n");
    sb.append("        EffectopediaObject owner = input != null ? input.getOwner() : null;\n");
    sb.append("        output = owner != null ? input.clone(owner, owner.getDataSource()) : input;\n");
    sb.append("        fireExecutionProgressMade(100);\n");
    sb.append("        return true;\n");
    sb.append("      }\n");
    sb.append("    \n");
    sb.append("    /**\n");
    sb.append("     * Add a new <code>ExecutionProgressListener</code> to the list of listeners.\n");
    sb.append("     * This allows Effectopedia interface to show the progress of the execution in\n");
    sb.append("     * a progress bar.\n");
    sb.append("     *\n");
    sb.append("     * @param listener\n");
    sb.append("     *         The <code>ExecutionProgressListener</code> to be added\n");
    sb.append("     * @see ExecutionProgressListener\n");
    sb.append("     * @since 1.0\n");
    sb.append("     */\n");
    sb.append("    @Override\n");
    sb.append("    public void addExecutionProgressListener(ExecutionProgressListener listener)\n");
    sb.append("      {\n");
    sb.append("        listeners.add(listener);\n");
    sb.append("      }\n");
    sb.append("    \n");
    sb.append("    /**\n");
    sb.append("     * Remove a <code>ExecutionProgressListener</code> from the list of listeners.\n");
    sb.append("     *\n");
    sb.append("     * @param listener\n");
    sb.append("     *         The <code>ExecutionProgressListener</code> to be removed\n");
    sb.append("     * @see ExecutionProgressListener\n");
    sb.append("     * @since 1.0\n");
    sb.append("     */\n");
    sb.append("    @Override\n");
    sb.append("    public void removeExecutionProgressListener(ExecutionProgressListener listener)\n");
    sb.append("      {\n");
    sb.append("        listeners.remove(listener);\n");
    sb.append("      }\n");
    sb.append("    \n");
    sb.append("    /**\n");
    sb.append("     * Notifies all <code>ExecutionProgressListener</code> from the list for the\n");
    sb.append("     * progress made.\n");
    sb.append("     *\n");
    sb.append("     * @param percentComplete\n");
    sb.append("     *         The <code>percentComplete</code> is an integer number between 0 and\n");
    sb.append("     *         100 which represents the progress of the model execution.\n");
    sb.append("     * @see ExecutionProgressListener\n");
    sb.append("     * @since 1.0\n");
    sb.append("     */\n");
    sb.append("    public void fireExecutionProgressMade(int percentComplete)\n");
    sb.append("      {\n");
    sb.append("        for (ExecutionProgressListener l : listeners)\n");
    sb.append("          l.onProgress(percentComplete);\n");
    sb.append("      }\n");
    sb.append("    \n");
    sb.append("    /**\n");
    sb.append("     * Set the output print stream for this model. Effectopedia uses this method\n");
    sb.append("     * to display all model messages in a console component. If method is called\n");
    sb.append("     * with null argument then the output is reset to the default System.out\n");
    sb.append("     * stream.\n");
    sb.append("     *\n");
    sb.append("     * @param percentComplete\n");
    sb.append("     *         The <code>percentComplete</code> is an integer number between 0 and\n");
    sb.append("     *         100 which represents the progress of the model execution.\n");
    sb.append("     * @see ExecutionProgressListener\n");
    sb.append("     * @since 1.0\n");
    sb.append("     */\n");
    sb.append("    public void setConsole(PrintStream console)\n");
    sb.append("      {\n");
    sb.append("        this.console = (console == null) ? System.out : console;\n");
    sb.append("      }\n");
    sb.append("    \n");
    sb.append("    /**\n");
    sb.append("     * Helper method not required by the <code>ExecutableModel</code> interface\n");
    sb.append("     * which can be used to display the values of the object properties in the\n");
    sb.append("     * print stream of the model to display all model.\n");
    sb.append("     *\n");
    sb.append("     * @param properties\n");
    sb.append("     *         The <code>ObjectProperties</code> to be printed.\n");
    sb.append("     * @param name\n");
    sb.append("     *         Display name of the object property to be printed.\n");
    sb.append("     * @see PrintStream\n");
    sb.append("     * @since 1.0\n");
    sb.append("     */\n");
    sb.append("    public void printObjectPropertys(ObjectProperties properties, String name)\n");
    sb.append("      {\n");
    sb.append("        if (properties != null)\n");
    sb.append("          {\n");
    sb.append("            /**\n");
    sb.append("             * <code>ObjectProperties</code> contains a reference to an\n");
    sb.append("             * <code>ObjectPropertyTypeContainer</code> class which defines the\n");
    sb.append("             * structure of this list of properties. This class is a list of\n");
    sb.append("             * <code>ObjectPropertyType</code> objects which describe the individual\n");
    sb.append("             * properties contained in the list.\n");
    sb.append("             */\n");
    sb.append("            this.console.println(name + \" (\" + properties.getTypes().size() + \")\");\n");
    sb.append("            // Iterate over the contained ObjectProperties\n");
    sb.append("            StringBuilder sb = new StringBuilder();\n");
    sb.append("            for (ObjectProperty op : properties.getProperties())\n");
    sb.append("              {\n");
    sb.append("                // Get the type of the current object property - op\n");
    sb.append("                ObjectPropertyType type = (ObjectPropertyType) op.getType();\n");
    sb.append("                \n");
    sb.append("                // Object property name\n");
    sb.append("                sb.append(type.getName());\n");
    sb.append("                // Object property type description\n");
    sb.append("                sb.append(\" has the following description \");\n");
    sb.append("                sb.append(type.getDescription());\n");
    sb.append("                \n");
    sb.append("                // Object property name\n");
    sb.append("                sb.append(type.getName());\n");
    sb.append("                // Check if the object property can contain multiple values.\n");
    sb.append("                if (type.isAcceptingMultipleValues())\n");
    sb.append("                  // The op instance is of ObjectProperty type\n");
    sb.append("                  sb.append(\" can not contain multiple values.\\n\");\n");
    sb.append("                else if (type.isDocumented())\n");
    sb.append("                  // The op instance is of ObjectProperty_Multivalued type\n");
    sb.append("                  sb.append(\" can contain multiple documented values.\\n\");\n");
    sb.append("                else\n");
    sb.append("                  // The op instance is of ObjectPropertyMultivalued_Documented type\n");
    sb.append("                  sb.append(\" can contain multiple values.\\n\");\n");
    sb.append("                \n");
    sb.append("                sb.append(type.getName());\n");
    sb.append("                sb.append(\" can contain data from type \");\n");
    sb.append("                // The data type of the op value\n");
    sb.append("                sb.append(type.getBaseValueType().getName());\n");
    sb.append("                if (type.getFixedValuesList() != null)\n");
    sb.append("                  {\n");
    sb.append("                    sb.append(\" only from the following list of possible values: \");\n");
    sb.append("                    sb.append(type.getFixedValuesList().toString());\n");
    sb.append("                  }\n");
    sb.append("                if (type.getDefaultUnit() != null)\n");
    sb.append("                  {\n");
    sb.append("                    sb.append(\" with the default data units of:\");\n");
    sb.append("                    sb.append(type.getDisplayUnit());\n");
    sb.append("                  }\n");
    sb.append("                sb.append(\"\\n\");\n");
    sb.append("                \n");
    sb.append("                // Object property type can have zero or more additional descriptors\n");
    sb.append("                if (type.getDescriptors().size() > 0)\n");
    sb.append("                  {\n");
    sb.append("                    sb.append(type.getName());\n");
    sb.append("                    sb.append(\" has \");\n");
    sb.append("                    sb.append(type.getDescriptors().size());\n");
    sb.append("                    sb.append(\" additional descriptor(s).These descriptors are:\\n\");\n");
    sb.append("                    \n");
    sb.append("                    for (DescriptorType descrType : type.getDescriptors().getAll())\n");
    sb.append("                      {\n");
    sb.append("                        // Descriptor types name\n");
    sb.append("                        sb.append(\"  \");\n");
    sb.append("                        sb.append(descrType.getName());\n");
    sb.append("                        sb.append(\" has the following description:\");\n");
    sb.append("                        // Descriptor types description\n");
    sb.append("                        sb.append(descrType.getDescription());\n");
    sb.append("                        sb.append(\" has values from type:\");\n");
    sb.append("                        sb.append(descrType.getBaseValueType().getName());\n");
    sb.append("                        if (descrType.getFixedValuesList() != null)\n");
    sb.append("                          {\n");
    sb.append("                            sb.append(\" and can have values only from the following list: \");\n");
    sb.append("                            sb.append(descrType.getFixedValuesList().toString());\n");
    sb.append("                          }\n");
    sb.append("                        if (descrType.getDefaultUnit() != null)\n");
    sb.append("                          {\n");
    sb.append("                            sb.append(\" with the default data units of:\");\n");
    sb.append("                            sb.append(descrType.getDisplayUnit());\n");
    sb.append("                          }\n");
    sb.append("                        sb.append(\"\\n\");\n");
    sb.append("                      }\n");
    sb.append("                  }\n");
    sb.append("                \n");
    sb.append("                 printObjectPtopertyValues(op,sb);\n");
    sb.append("                // Object properties can be hierarchical and contain list of sub\n");
    sb.append("                // properties.Use the same method recursivly to display their structure\n");
    sb.append("                // and values\n");
    sb.append("                printObjectPropertys(op.getSubProperties(), name + \".sub_properties\");\n");
    sb.append("              }\n");
    sb.append("            console.println(sb.toString());\n");
    sb.append("          }\n");
    sb.append("        else\n");
    sb.append("          console.println(\"null\");\n");
    sb.append("      }\n");
    sb.append("    \n");
    sb.append("    protected void printObjectPtopertyValues(ObjectProperty objectProperty, StringBuilder sb)\n");
    sb.append("      {\n");
    sb.append("        if (objectProperty instanceof ObjectPropertyMultivalued_Documented)\n");
    sb.append("          {\n");
    sb.append("            for (Documented_Value value : ((ObjectPropertyMultivalued_Documented) objectProperty).getValuePairs())\n");
    sb.append("              {\n");
    sb.append("                sb.append(objectProperty.getType().getName());\n");
    sb.append("                sb.append(\" has the following value: \");\n");
    sb.append("                sb.append(value.getDisplayValue());\n");
    sb.append("                sb.append(value.getDisplayUnit());\n");
    sb.append("                sb.append(\" and range [ \");\n");
    sb.append("                sb.append(value.getDisplayMinValue());\n");
    sb.append("                sb.append(value.getDisplayUnit());\n");
    sb.append("                sb.append(\", \");\n");
    sb.append("                sb.append(value.getDisplayMinValue());\n");
    sb.append("                sb.append(value.getDisplayUnit());\n");
    sb.append("                sb.append(\"] \");\n");
    sb.append("                sb.append(\" descriptors: [\");\n");
    sb.append("                for (Descriptor descriptor : value.getDescriptors())\n");
    sb.append("                  {\n");
    sb.append("                    sb.append(descriptor.getType().getName());\n");
    sb.append("                    sb.append(\": \");\n");
    sb.append("                    sb.append(descriptor.getDisplayValue());\n");
    sb.append("                    sb.append(descriptor.getDisplayUnit());\n");
    sb.append("                    sb.append(\" \");\n");
    sb.append("                  }\n");
    sb.append("                sb.append(\"]\");\n");
    sb.append("                \n");
    sb.append("                sb.append(\" notes: \");\n");
    sb.append("                sb.append(value.getNotes());\n");
    sb.append("                \n");
    sb.append("                sb.append(\" references: \");\n");
    sb.append("                sb.append(value.getReferences());\n");
    sb.append("                sb.append(value.getDisplayUnit());\n");
    sb.append("                sb.append(\"\\n\");\n");
    sb.append("              }\n");
    sb.append("          }\n");
    sb.append("        else if (objectProperty instanceof ObjectPropertyMultivalued)\n");
    sb.append("          {\n");
    sb.append("            for (ValueAndUnit value : ((ObjectPropertyMultivalued) objectProperty).getValuePairs())\n");
    sb.append("              {\n");
    sb.append("                sb.append(\"value: \");\n");
    sb.append("                sb.append(value.getDisplayValue());\n");
    sb.append("                sb.append(value.getDisplayUnit());\n");
    sb.append("                sb.append(\"\\n\");\n");
    sb.append("              }\n");
    sb.append("          }\n");
    sb.append("        else\n");
    sb.append("          {\n");
    sb.append("            sb.append(\"value: \");\n");
    sb.append("            sb.append(objectProperty.getDisplayValue());\n");
    sb.append("            sb.append(objectProperty.getDisplayUnit());\n");
    sb.append("            sb.append(\"\\n\");\n");
    sb.append("          }\n");
    sb.append("      }\n");
    sb.append("    \n");
    sb.append("    protected PrintStream                           console    = System.out;\n");
    sb.append("    protected ArrayList<ExecutionProgressListener>  listeners  = new ArrayList<ExecutionProgressListener>();\n");
    sb.append("  }\n");

				DEFAULT_JAVA_EXECUTABLE_MODEL = sb.toString();
			}
	}
